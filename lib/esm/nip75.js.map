{
  "version": 3,
  "sources": ["../../kinds.ts", "../../nip75.ts"],
  "sourcesContent": ["/** Events are **regular**, which means they're all expected to be stored by relays. */\nexport function isRegularKind(kind: number): boolean {\n  return (1000 <= kind && kind < 10000) || [1, 2, 4, 5, 6, 7, 8, 16, 40, 41, 42, 43, 44].includes(kind)\n}\n\n/** Events are **replaceable**, which means that, for each combination of `pubkey` and `kind`, only the latest event is expected to (SHOULD) be stored by relays, older versions are expected to be discarded. */\nexport function isReplaceableKind(kind: number): boolean {\n  return [0, 3].includes(kind) || (10000 <= kind && kind < 20000)\n}\n\n/** Events are **ephemeral**, which means they are not expected to be stored by relays. */\nexport function isEphemeralKind(kind: number): boolean {\n  return 20000 <= kind && kind < 30000\n}\n\n/** Events are **parameterized replaceable**, which means that, for each combination of `pubkey`, `kind` and the `d` tag, only the latest event is expected to be stored by relays, older versions are expected to be discarded. */\nexport function isParameterizedReplaceableKind(kind: number): boolean {\n  return 30000 <= kind && kind < 40000\n}\n\n/** Classification of the event kind. */\nexport type KindClassification = 'regular' | 'replaceable' | 'ephemeral' | 'parameterized' | 'unknown'\n\n/** Determine the classification of this kind of event if known, or `unknown`. */\nexport function classifyKind(kind: number): KindClassification {\n  if (isRegularKind(kind)) return 'regular'\n  if (isReplaceableKind(kind)) return 'replaceable'\n  if (isEphemeralKind(kind)) return 'ephemeral'\n  if (isParameterizedReplaceableKind(kind)) return 'parameterized'\n  return 'unknown'\n}\n\nexport const Metadata = 0\nexport const ShortTextNote = 1\nexport const RecommendRelay = 2\nexport const Contacts = 3\nexport const EncryptedDirectMessage = 4\nexport const EventDeletion = 5\nexport const Repost = 6\nexport const Reaction = 7\nexport const BadgeAward = 8\nexport const Seal = 13\nexport const PrivateDirectMessage = 14\nexport const GenericRepost = 16\nexport const ChannelCreation = 40\nexport const ChannelMetadata = 41\nexport const ChannelMessage = 42\nexport const ChannelHideMessage = 43\nexport const ChannelMuteUser = 44\nexport const OpenTimestamps = 1040\nexport const FileMetadata = 1063\nexport const LiveChatMessage = 1311\nexport const ProblemTracker = 1971\nexport const Report = 1984\nexport const Reporting = 1984\nexport const Label = 1985\nexport const CommunityPostApproval = 4550\nexport const JobRequest = 5999\nexport const JobResult = 6999\nexport const JobFeedback = 7000\nexport const ZapGoal = 9041\nexport const ZapRequest = 9734\nexport const Zap = 9735\nexport const Highlights = 9802\nexport const Mutelist = 10000\nexport const Pinlist = 10001\nexport const RelayList = 10002\nexport const BookmarkList = 10003\nexport const CommunitiesList = 10004\nexport const PublicChatsList = 10005\nexport const BlockedRelaysList = 10006\nexport const SearchRelaysList = 10007\nexport const InterestsList = 10015\nexport const UserEmojiList = 10030\nexport const DirectMessageRelaysList = 10050\nexport const GiftWrap = 10059\nexport const FileServerPreference = 10096\nexport const NWCWalletInfo = 13194\nexport const LightningPubRPC = 21000\nexport const ClientAuth = 22242\nexport const NWCWalletRequest = 23194\nexport const NWCWalletResponse = 23195\nexport const NostrConnect = 24133\nexport const HTTPAuth = 27235\nexport const Followsets = 30000\nexport const Genericlists = 30001\nexport const Relaysets = 30002\nexport const Bookmarksets = 30003\nexport const Curationsets = 30004\nexport const ProfileBadges = 30008\nexport const BadgeDefinition = 30009\nexport const Interestsets = 30015\nexport const CreateOrUpdateStall = 30017\nexport const CreateOrUpdateProduct = 30018\nexport const LongFormArticle = 30023\nexport const DraftLong = 30024\nexport const Emojisets = 30030\nexport const Application = 30078\nexport const LiveEvent = 30311\nexport const UserStatuses = 30315\nexport const ClassifiedListing = 30402\nexport const DraftClassifiedListing = 30403\nexport const Date = 31922\nexport const Time = 31923\nexport const Calendar = 31924\nexport const CalendarEventRSVP = 31925\nexport const Handlerrecommendation = 31989\nexport const Handlerinformation = 31990\nexport const CommunityDefinition = 34550\n", "import { Event, EventTemplate } from './core.ts'\nimport { ZapGoal } from './kinds.ts'\n\n/**\n * Represents a fundraising goal in the Nostr network as defined by NIP-75.\n * This type is used to structure the information needed to create a goal event (`kind:9041`).\n */\nexport type Goal = {\n  /**\n   * A human-readable description of the fundraising goal.\n   * This content should provide clear information about the purpose of the fundraising.\n   */\n  content: string\n\n  /**\n   * The target amount for the fundraising goal in milisats.\n   * This defines the financial target that the fundraiser aims to reach.\n   */\n  amount: string\n\n  /**\n   * A list of relays where the zaps towards this goal will be sent to and tallied from.\n   * Each relay is represented by its WebSocket URL.\n   */\n  relays: string[]\n\n  /**\n   * An optional timestamp (in seconds, UNIX epoch) indicating when the fundraising goal is considered closed.\n   * Zaps published after this timestamp should not count towards the goal progress.\n   * If not provided, the goal remains open indefinitely or until manually closed.\n   */\n  closedAt?: number\n\n  /**\n   * An optional URL to an image related to the goal.\n   * This can be used to visually represent the goal on client interfaces.\n   */\n  image?: string\n\n  /**\n   * An optional brief description or summary of the goal.\n   * This can provide a quick overview of the goal, separate from the detailed `content`.\n   */\n  summary?: string\n\n  /**\n   * An optional URL related to the goal, providing additional information or actions through an 'r' tag.\n   * This is a single URL, as per NIP-75 specifications for linking additional resources.\n   */\n  r?: string\n\n  /**\n   * An optional parameterized replaceable event linked to the goal, specified through an 'a' tag.\n   * This is a single event id, aligning with NIP-75's allowance for linking to specific events.\n   */\n  a?: string\n\n  /**\n   * Optional tags specifying multiple beneficiary pubkeys or additional criteria for zapping,\n   * allowing contributions to be directed towards multiple recipients or according to specific conditions.\n   */\n  zapTags?: string[][]\n}\n\n/**\n * Generates an EventTemplate for a fundraising goal based on the provided ZapGoal object.\n * This function is tailored to fit the structure of EventTemplate as defined in the library.\n * @param zapGoal The ZapGoal object containing the details of the fundraising goal.\n * @returns An EventTemplate object structured for creating a Nostr event.\n */\nexport function generateGoalEventTemplate({\n  amount,\n  content,\n  relays,\n  a,\n  closedAt,\n  image,\n  r,\n  summary,\n  zapTags,\n}: Goal): EventTemplate {\n  const tags: string[][] = [\n    ['amount', amount],\n    ['relays', ...relays],\n  ]\n\n  // Append optional tags based on the presence of optional properties in zapGoal\n  closedAt && tags.push(['closed_at', closedAt.toString()])\n  image && tags.push(['image', image])\n  summary && tags.push(['summary', summary])\n  r && tags.push(['r', r])\n  a && tags.push(['a', a])\n  zapTags && tags.push(...zapTags)\n\n  // Construct the EventTemplate object\n  const eventTemplate: EventTemplate = {\n    created_at: Math.floor(Date.now() / 1000),\n    kind: ZapGoal,\n    content,\n    tags,\n  }\n\n  return eventTemplate\n}\n\nexport function validateZapGoalEvent(event: Event): boolean {\n  if (event.kind !== ZapGoal) return false\n\n  const requiredTags = ['amount', 'relays'] as const\n  for (const tag of requiredTags) {\n    if (!event.tags.find(([t]) => t == tag)) return false\n  }\n\n  return true\n}\n"],
  "mappings": ";AA4DO,IAAM,UAAU;;;ACUhB,SAAS,0BAA0B;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAwB;AACtB,QAAM,OAAmB;AAAA,IACvB,CAAC,UAAU,MAAM;AAAA,IACjB,CAAC,UAAU,GAAG,MAAM;AAAA,EACtB;AAGA,cAAY,KAAK,KAAK,CAAC,aAAa,SAAS,SAAS,CAAC,CAAC;AACxD,WAAS,KAAK,KAAK,CAAC,SAAS,KAAK,CAAC;AACnC,aAAW,KAAK,KAAK,CAAC,WAAW,OAAO,CAAC;AACzC,OAAK,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC;AACvB,OAAK,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC;AACvB,aAAW,KAAK,KAAK,GAAG,OAAO;AAG/B,QAAM,gBAA+B;AAAA,IACnC,YAAY,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AAAA,IACxC,MAAM;AAAA,IACN;AAAA,IACA;AAAA,EACF;AAEA,SAAO;AACT;AAEO,SAAS,qBAAqB,OAAuB;AAC1D,MAAI,MAAM,SAAS;AAAS,WAAO;AAEnC,QAAM,eAAe,CAAC,UAAU,QAAQ;AACxC,aAAW,OAAO,cAAc;AAC9B,QAAI,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,MAAM,KAAK,GAAG;AAAG,aAAO;AAAA,EAClD;AAEA,SAAO;AACT;",
  "names": []
}
