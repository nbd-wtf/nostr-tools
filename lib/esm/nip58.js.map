{
  "version": 3,
  "sources": ["../../kinds.ts", "../../nip58.ts"],
  "sourcesContent": ["import { NostrEvent, validateEvent } from './pure.ts'\n\n/** Events are **regular**, which means they're all expected to be stored by relays. */\nexport function isRegularKind(kind: number): boolean {\n  return (1000 <= kind && kind < 10000) || [1, 2, 4, 5, 6, 7, 8, 16, 40, 41, 42, 43, 44].includes(kind)\n}\n\n/** Events are **replaceable**, which means that, for each combination of `pubkey` and `kind`, only the latest event is expected to (SHOULD) be stored by relays, older versions are expected to be discarded. */\nexport function isReplaceableKind(kind: number): boolean {\n  return [0, 3].includes(kind) || (10000 <= kind && kind < 20000)\n}\n\n/** Events are **ephemeral**, which means they are not expected to be stored by relays. */\nexport function isEphemeralKind(kind: number): boolean {\n  return 20000 <= kind && kind < 30000\n}\n\n/** Events are **parameterized replaceable**, which means that, for each combination of `pubkey`, `kind` and the `d` tag, only the latest event is expected to be stored by relays, older versions are expected to be discarded. */\nexport function isParameterizedReplaceableKind(kind: number): boolean {\n  return 30000 <= kind && kind < 40000\n}\n\n/** Classification of the event kind. */\nexport type KindClassification = 'regular' | 'replaceable' | 'ephemeral' | 'parameterized' | 'unknown'\n\n/** Determine the classification of this kind of event if known, or `unknown`. */\nexport function classifyKind(kind: number): KindClassification {\n  if (isRegularKind(kind)) return 'regular'\n  if (isReplaceableKind(kind)) return 'replaceable'\n  if (isEphemeralKind(kind)) return 'ephemeral'\n  if (isParameterizedReplaceableKind(kind)) return 'parameterized'\n  return 'unknown'\n}\n\nexport function isKind<T extends number>(event: unknown, kind: T | Array<T>): event is NostrEvent & { kind: T } {\n  const kindAsArray: number[] = kind instanceof Array ? kind : [kind]\n  return (validateEvent(event) && kindAsArray.includes(event.kind)) || false\n}\n\nexport const Metadata = 0\nexport type Metadata = typeof Metadata\nexport const ShortTextNote = 1\nexport type ShortTextNote = typeof ShortTextNote\nexport const RecommendRelay = 2\nexport type RecommendRelay = typeof RecommendRelay\nexport const Contacts = 3\nexport type Contacts = typeof Contacts\nexport const EncryptedDirectMessage = 4\nexport type EncryptedDirectMessage = typeof EncryptedDirectMessage\nexport const EventDeletion = 5\nexport type EventDeletion = typeof EventDeletion\nexport const Repost = 6\nexport type Repost = typeof Repost\nexport const Reaction = 7\nexport type Reaction = typeof Reaction\nexport const BadgeAward = 8\nexport type BadgeAward = typeof BadgeAward\nexport const Seal = 13\nexport type Seal = typeof Seal\nexport const PrivateDirectMessage = 14\nexport type PrivateDirectMessage = typeof PrivateDirectMessage\nexport const GenericRepost = 16\nexport type GenericRepost = typeof GenericRepost\nexport const ChannelCreation = 40\nexport type ChannelCreation = typeof ChannelCreation\nexport const ChannelMetadata = 41\nexport type ChannelMetadata = typeof ChannelMetadata\nexport const ChannelMessage = 42\nexport type ChannelMessage = typeof ChannelMessage\nexport const ChannelHideMessage = 43\nexport type ChannelHideMessage = typeof ChannelHideMessage\nexport const ChannelMuteUser = 44\nexport type ChannelMuteUser = typeof ChannelMuteUser\nexport const OpenTimestamps = 1040\nexport type OpenTimestamps = typeof OpenTimestamps\nexport const GiftWrap = 1059\nexport type GiftWrap = typeof GiftWrap\nexport const FileMetadata = 1063\nexport type FileMetadata = typeof FileMetadata\nexport const LiveChatMessage = 1311\nexport type LiveChatMessage = typeof LiveChatMessage\nexport const ProblemTracker = 1971\nexport type ProblemTracker = typeof ProblemTracker\nexport const Report = 1984\nexport type Report = typeof Report\nexport const Reporting = 1984\nexport type Reporting = typeof Reporting\nexport const Label = 1985\nexport type Label = typeof Label\nexport const CommunityPostApproval = 4550\nexport type CommunityPostApproval = typeof CommunityPostApproval\nexport const JobRequest = 5999\nexport type JobRequest = typeof JobRequest\nexport const JobResult = 6999\nexport type JobResult = typeof JobResult\nexport const JobFeedback = 7000\nexport type JobFeedback = typeof JobFeedback\nexport const ZapGoal = 9041\nexport type ZapGoal = typeof ZapGoal\nexport const ZapRequest = 9734\nexport type ZapRequest = typeof ZapRequest\nexport const Zap = 9735\nexport type Zap = typeof Zap\nexport const Highlights = 9802\nexport type Highlights = typeof Highlights\nexport const Mutelist = 10000\nexport type Mutelist = typeof Mutelist\nexport const Pinlist = 10001\nexport type Pinlist = typeof Pinlist\nexport const RelayList = 10002\nexport type RelayList = typeof RelayList\nexport const BookmarkList = 10003\nexport type BookmarkList = typeof BookmarkList\nexport const CommunitiesList = 10004\nexport type CommunitiesList = typeof CommunitiesList\nexport const PublicChatsList = 10005\nexport type PublicChatsList = typeof PublicChatsList\nexport const BlockedRelaysList = 10006\nexport type BlockedRelaysList = typeof BlockedRelaysList\nexport const SearchRelaysList = 10007\nexport type SearchRelaysList = typeof SearchRelaysList\nexport const InterestsList = 10015\nexport type InterestsList = typeof InterestsList\nexport const UserEmojiList = 10030\nexport type UserEmojiList = typeof UserEmojiList\nexport const DirectMessageRelaysList = 10050\nexport type DirectMessageRelaysList = typeof DirectMessageRelaysList\nexport const FileServerPreference = 10096\nexport type FileServerPreference = typeof FileServerPreference\nexport const NWCWalletInfo = 13194\nexport type NWCWalletInfo = typeof NWCWalletInfo\nexport const LightningPubRPC = 21000\nexport type LightningPubRPC = typeof LightningPubRPC\nexport const ClientAuth = 22242\nexport type ClientAuth = typeof ClientAuth\nexport const NWCWalletRequest = 23194\nexport type NWCWalletRequest = typeof NWCWalletRequest\nexport const NWCWalletResponse = 23195\nexport type NWCWalletResponse = typeof NWCWalletResponse\nexport const NostrConnect = 24133\nexport type NostrConnect = typeof NostrConnect\nexport const HTTPAuth = 27235\nexport type HTTPAuth = typeof HTTPAuth\nexport const Followsets = 30000\nexport type Followsets = typeof Followsets\nexport const Genericlists = 30001\nexport type Genericlists = typeof Genericlists\nexport const Relaysets = 30002\nexport type Relaysets = typeof Relaysets\nexport const Bookmarksets = 30003\nexport type Bookmarksets = typeof Bookmarksets\nexport const Curationsets = 30004\nexport type Curationsets = typeof Curationsets\nexport const ProfileBadges = 30008\nexport type ProfileBadges = typeof ProfileBadges\nexport const BadgeDefinition = 30009\nexport type BadgeDefinition = typeof BadgeDefinition\nexport const Interestsets = 30015\nexport type Interestsets = typeof Interestsets\nexport const CreateOrUpdateStall = 30017\nexport type CreateOrUpdateStall = typeof CreateOrUpdateStall\nexport const CreateOrUpdateProduct = 30018\nexport type CreateOrUpdateProduct = typeof CreateOrUpdateProduct\nexport const LongFormArticle = 30023\nexport type LongFormArticle = typeof LongFormArticle\nexport const DraftLong = 30024\nexport type DraftLong = typeof DraftLong\nexport const Emojisets = 30030\nexport type Emojisets = typeof Emojisets\nexport const Application = 30078\nexport type Application = typeof Application\nexport const LiveEvent = 30311\nexport type LiveEvent = typeof LiveEvent\nexport const UserStatuses = 30315\nexport type UserStatuses = typeof UserStatuses\nexport const ClassifiedListing = 30402\nexport type ClassifiedListing = typeof ClassifiedListing\nexport const DraftClassifiedListing = 30403\nexport type DraftClassifiedListing = typeof DraftClassifiedListing\nexport const Date = 31922\nexport type Date = typeof Date\nexport const Time = 31923\nexport type Time = typeof Time\nexport const Calendar = 31924\nexport type Calendar = typeof Calendar\nexport const CalendarEventRSVP = 31925\nexport type CalendarEventRSVP = typeof CalendarEventRSVP\nexport const Handlerrecommendation = 31989\nexport type Handlerrecommendation = typeof Handlerrecommendation\nexport const Handlerinformation = 31990\nexport type Handlerinformation = typeof Handlerinformation\nexport const CommunityDefinition = 34550\nexport type CommunityDefinition = typeof CommunityDefinition\n", "import { Event, EventTemplate } from './core.ts'\nimport {\n  BadgeAward as BadgeAwardKind,\n  BadgeDefinition as BadgeDefinitionKind,\n  ProfileBadges as ProfileBadgesKind,\n} from './kinds.ts'\n\n/**\n * Represents the structure for defining a badge within the Nostr network.\n * This structure is used to create templates for badge definition events,\n * facilitating the recognition and awarding of badges to users for various achievements.\n */\nexport type BadgeDefinition = {\n  /**\n   * A unique identifier for the badge. This is used to distinguish badges\n   * from one another and should be unique across all badge definitions.\n   * Typically, this could be a short, descriptive string.\n   */\n  d: string\n\n  /**\n   * An optional short name for the badge. This provides a human-readable\n   * title for the badge, making it easier to recognize and refer to.\n   */\n  name?: string\n\n  /**\n   * An optional description for the badge. This field can be used to\n   * provide more detailed information about the badge, such as the criteria\n   * for its awarding or its significance.\n   */\n  description?: string\n\n  /**\n   * An optional image URL and dimensions for the badge. The first element\n   * of the tuple is the URL pointing to a high-resolution image representing\n   * the badge, and the second element specifies the image's dimensions in\n   * the format \"widthxheight\". The recommended dimensions are 1024x1024 pixels.\n   */\n  image?: [string, string]\n\n  /**\n   * An optional list of thumbnail images for the badge. Each element in the\n   * array is a tuple, where the first element is the URL pointing to a thumbnail\n   * version of the badge image, and the second element specifies the thumbnail's\n   * dimensions in the format \"widthxheight\". Multiple thumbnails can be provided\n   * to support different display sizes.\n   */\n  thumbs?: Array<[string, string]>\n}\n\n/**\n * Represents the structure for awarding a badge to one or more recipients\n * within the Nostr network. This structure is used to create templates for\n * badge award events, which are immutable and signify the recognition of\n * individuals' achievements or contributions.\n */\nexport type BadgeAward = {\n  /**\n   * A reference to the Badge Definition event. This is typically composed\n   * of the event ID of the badge definition. It establishes a clear linkage\n   * between the badge being awarded and its original definition, ensuring\n   * that recipients are awarded the correct badge.\n   */\n  a: string\n\n  /**\n   * An array of p tags, each containing a pubkey and its associated relays.\n   */\n  p: string[][]\n}\n\n/**\n * Represents the collection of badges a user chooses to display on their profile.\n * This structure is crucial for applications that allow users to showcase achievements\n * or recognitions in the form of badges, following the specifications of NIP-58.\n */\nexport type ProfileBadges = {\n  /**\n   * A unique identifier for the profile badges collection. According to NIP-58,\n   * this should be set to \"profile_badges\" to differentiate it from other event types.\n   */\n  d: 'profile_badges'\n\n  /**\n   * A list of badges that the user has elected to display on their profile. Each item\n   * in the array represents a specific badge, including references to both its definition\n   * and the award event.\n   */\n  badges: Array<{\n    /**\n     * The event address of the badge definition. This is a reference to the specific badge\n     * being displayed, linking back to the badge's original definition event. It allows\n     * clients to fetch and display the badge's details, such as its name, description,\n     * and image.\n     */\n    a: string\n\n    /**\n     * The event id of the badge award with corresponding relays. This references the event\n     * in which the badge was awarded to the user. It is crucial for verifying the\n     * authenticity of the badge display, ensuring that the user was indeed awarded the\n     * badge they are choosing to display.\n     */\n    e: string[]\n  }>\n}\n\n/**\n * Generates an EventTemplate based on the provided BadgeDefinition.\n *\n * @param {BadgeDefinition} badgeDefinition - The BadgeDefinition object.\n * @returns {EventTemplate} - The generated EventTemplate object.\n */\nexport function generateBadgeDefinitionEventTemplate({\n  d,\n  description,\n  image,\n  name,\n  thumbs,\n}: BadgeDefinition): EventTemplate {\n  // Mandatory tags\n  const tags: string[][] = [['d', d]]\n\n  // Append optional tags\n  name && tags.push(['name', name])\n  description && tags.push(['description', description])\n  image && tags.push(['image', ...image])\n  if (thumbs) {\n    for (const thumb of thumbs) {\n      tags.push(['thumb', ...thumb])\n    }\n  }\n\n  // Construct the EventTemplate object\n  const eventTemplate: EventTemplate = {\n    content: '',\n    created_at: Math.floor(Date.now() / 1000),\n    kind: BadgeDefinitionKind,\n    tags,\n  }\n\n  return eventTemplate\n}\n\n/**\n * Validates a badge definition event.\n *\n * @param event - The event to validate.\n * @returns A boolean indicating whether the event is a valid badge definition event.\n */\nexport function validateBadgeDefinitionEvent(event: Event): boolean {\n  if (event.kind !== BadgeDefinitionKind) return false\n\n  const requiredTags = ['d'] as const\n  for (const tag of requiredTags) {\n    if (!event.tags.find(([t]) => t == tag)) return false\n  }\n\n  return true\n}\n\n/**\n * Generates an EventTemplate based on the provided BadgeAward.\n *\n * @param {BadgeAward} badgeAward - The BadgeAward object.\n * @returns {EventTemplate} - The generated EventTemplate object.\n */\nexport function generateBadgeAwardEventTemplate({ a, p }: BadgeAward): EventTemplate {\n  // Mandatory tags\n  const tags: string[][] = [['a', a]]\n  for (const _p of p) {\n    tags.push(['p', ..._p])\n  }\n\n  // Construct the EventTemplate object\n  const eventTemplate: EventTemplate = {\n    content: '',\n    created_at: Math.floor(Date.now() / 1000),\n    kind: BadgeAwardKind,\n    tags,\n  }\n\n  return eventTemplate\n}\n\n/**\n * Validates a badge award event.\n *\n * @param event - The event to validate.\n * @returns A boolean indicating whether the event is a valid badge award event.\n */\nexport function validateBadgeAwardEvent(event: Event): boolean {\n  if (event.kind !== BadgeAwardKind) return false\n\n  const requiredTags = ['a', 'p'] as const\n  for (const tag of requiredTags) {\n    if (!event.tags.find(([t]) => t == tag)) return false\n  }\n\n  return true\n}\n\n/**\n * Generates an EventTemplate based on the provided ProfileBadges.\n *\n * @param {ProfileBadges} profileBadges - The ProfileBadges object.\n * @returns {EventTemplate} - The generated EventTemplate object.\n */\nexport function generateProfileBadgesEventTemplate({ badges }: ProfileBadges): EventTemplate {\n  // Mandatory tags\n  const tags: string[][] = [['d', 'profile_badges']]\n\n  // Append optional tags\n  for (const badge of badges) {\n    tags.push(['a', badge.a], ['e', ...badge.e])\n  }\n\n  // Construct the EventTemplate object\n  const eventTemplate: EventTemplate = {\n    content: '',\n    created_at: Math.floor(Date.now() / 1000),\n    kind: ProfileBadgesKind,\n    tags,\n  }\n\n  return eventTemplate\n}\n\n/**\n * Validates a profile badges event.\n *\n * @param event - The event to validate.\n * @returns A boolean indicating whether the event is a valid profile badges event.\n */\nexport function validateProfileBadgesEvent(event: Event): boolean {\n  if (event.kind !== ProfileBadgesKind) return false\n\n  const requiredTags = ['d'] as const\n  for (const tag of requiredTags) {\n    if (!event.tags.find(([t]) => t == tag)) return false\n  }\n\n  return true\n}\n"],
  "mappings": ";AAuDO,IAAM,aAAa;AAkGnB,IAAM,gBAAgB;AAEtB,IAAM,kBAAkB;;;ACzCxB,SAAS,qCAAqC;AAAA,EACnD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAmC;AAEjC,QAAM,OAAmB,CAAC,CAAC,KAAK,CAAC,CAAC;AAGlC,UAAQ,KAAK,KAAK,CAAC,QAAQ,IAAI,CAAC;AAChC,iBAAe,KAAK,KAAK,CAAC,eAAe,WAAW,CAAC;AACrD,WAAS,KAAK,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;AACtC,MAAI,QAAQ;AACV,eAAW,SAAS,QAAQ;AAC1B,WAAK,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;AAAA,IAC/B;AAAA,EACF;AAGA,QAAM,gBAA+B;AAAA,IACnC,SAAS;AAAA,IACT,YAAY,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AAAA,IACxC,MAAM;AAAA,IACN;AAAA,EACF;AAEA,SAAO;AACT;AAQO,SAAS,6BAA6B,OAAuB;AAClE,MAAI,MAAM,SAAS;AAAqB,WAAO;AAE/C,QAAM,eAAe,CAAC,GAAG;AACzB,aAAW,OAAO,cAAc;AAC9B,QAAI,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,MAAM,KAAK,GAAG;AAAG,aAAO;AAAA,EAClD;AAEA,SAAO;AACT;AAQO,SAAS,gCAAgC,EAAE,GAAG,EAAE,GAA8B;AAEnF,QAAM,OAAmB,CAAC,CAAC,KAAK,CAAC,CAAC;AAClC,aAAW,MAAM,GAAG;AAClB,SAAK,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;AAAA,EACxB;AAGA,QAAM,gBAA+B;AAAA,IACnC,SAAS;AAAA,IACT,YAAY,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AAAA,IACxC,MAAM;AAAA,IACN;AAAA,EACF;AAEA,SAAO;AACT;AAQO,SAAS,wBAAwB,OAAuB;AAC7D,MAAI,MAAM,SAAS;AAAgB,WAAO;AAE1C,QAAM,eAAe,CAAC,KAAK,GAAG;AAC9B,aAAW,OAAO,cAAc;AAC9B,QAAI,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,MAAM,KAAK,GAAG;AAAG,aAAO;AAAA,EAClD;AAEA,SAAO;AACT;AAQO,SAAS,mCAAmC,EAAE,OAAO,GAAiC;AAE3F,QAAM,OAAmB,CAAC,CAAC,KAAK,gBAAgB,CAAC;AAGjD,aAAW,SAAS,QAAQ;AAC1B,SAAK,KAAK,CAAC,KAAK,MAAM,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC;AAAA,EAC7C;AAGA,QAAM,gBAA+B;AAAA,IACnC,SAAS;AAAA,IACT,YAAY,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AAAA,IACxC,MAAM;AAAA,IACN;AAAA,EACF;AAEA,SAAO;AACT;AAQO,SAAS,2BAA2B,OAAuB;AAChE,MAAI,MAAM,SAAS;AAAmB,WAAO;AAE7C,QAAM,eAAe,CAAC,GAAG;AACzB,aAAW,OAAO,cAAc;AAC9B,QAAI,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,MAAM,KAAK,GAAG;AAAG,aAAO;AAAA,EAClD;AAEA,SAAO;AACT;",
  "names": []
}
