{
  "version": 3,
  "sources": ["../../kinds.ts", "../../nip94.ts"],
  "sourcesContent": ["import { NostrEvent, validateEvent } from './pure.ts'\n\n/** Events are **regular**, which means they're all expected to be stored by relays. */\nexport function isRegularKind(kind: number): boolean {\n  return (1000 <= kind && kind < 10000) || [1, 2, 4, 5, 6, 7, 8, 16, 40, 41, 42, 43, 44].includes(kind)\n}\n\n/** Events are **replaceable**, which means that, for each combination of `pubkey` and `kind`, only the latest event is expected to (SHOULD) be stored by relays, older versions are expected to be discarded. */\nexport function isReplaceableKind(kind: number): boolean {\n  return [0, 3].includes(kind) || (10000 <= kind && kind < 20000)\n}\n\n/** Events are **ephemeral**, which means they are not expected to be stored by relays. */\nexport function isEphemeralKind(kind: number): boolean {\n  return 20000 <= kind && kind < 30000\n}\n\n/** Events are **parameterized replaceable**, which means that, for each combination of `pubkey`, `kind` and the `d` tag, only the latest event is expected to be stored by relays, older versions are expected to be discarded. */\nexport function isParameterizedReplaceableKind(kind: number): boolean {\n  return 30000 <= kind && kind < 40000\n}\n\n/** Classification of the event kind. */\nexport type KindClassification = 'regular' | 'replaceable' | 'ephemeral' | 'parameterized' | 'unknown'\n\n/** Determine the classification of this kind of event if known, or `unknown`. */\nexport function classifyKind(kind: number): KindClassification {\n  if (isRegularKind(kind)) return 'regular'\n  if (isReplaceableKind(kind)) return 'replaceable'\n  if (isEphemeralKind(kind)) return 'ephemeral'\n  if (isParameterizedReplaceableKind(kind)) return 'parameterized'\n  return 'unknown'\n}\n\nexport function isKind<T extends number>(event: unknown, kind: T | Array<T>): event is NostrEvent & { kind: T } {\n  const kindAsArray: number[] = kind instanceof Array ? kind : [kind]\n  return (validateEvent(event) && kindAsArray.includes(event.kind)) || false\n}\n\nexport const Metadata = 0\nexport type Metadata = typeof Metadata\nexport const ShortTextNote = 1\nexport type ShortTextNote = typeof ShortTextNote\nexport const RecommendRelay = 2\nexport type RecommendRelay = typeof RecommendRelay\nexport const Contacts = 3\nexport type Contacts = typeof Contacts\nexport const EncryptedDirectMessage = 4\nexport type EncryptedDirectMessage = typeof EncryptedDirectMessage\nexport const EventDeletion = 5\nexport type EventDeletion = typeof EventDeletion\nexport const Repost = 6\nexport type Repost = typeof Repost\nexport const Reaction = 7\nexport type Reaction = typeof Reaction\nexport const BadgeAward = 8\nexport type BadgeAward = typeof BadgeAward\nexport const Seal = 13\nexport type Seal = typeof Seal\nexport const PrivateDirectMessage = 14\nexport type PrivateDirectMessage = typeof PrivateDirectMessage\nexport const GenericRepost = 16\nexport type GenericRepost = typeof GenericRepost\nexport const ChannelCreation = 40\nexport type ChannelCreation = typeof ChannelCreation\nexport const ChannelMetadata = 41\nexport type ChannelMetadata = typeof ChannelMetadata\nexport const ChannelMessage = 42\nexport type ChannelMessage = typeof ChannelMessage\nexport const ChannelHideMessage = 43\nexport type ChannelHideMessage = typeof ChannelHideMessage\nexport const ChannelMuteUser = 44\nexport type ChannelMuteUser = typeof ChannelMuteUser\nexport const OpenTimestamps = 1040\nexport type OpenTimestamps = typeof OpenTimestamps\nexport const GiftWrap = 1059\nexport type GiftWrap = typeof GiftWrap\nexport const FileMetadata = 1063\nexport type FileMetadata = typeof FileMetadata\nexport const LiveChatMessage = 1311\nexport type LiveChatMessage = typeof LiveChatMessage\nexport const ProblemTracker = 1971\nexport type ProblemTracker = typeof ProblemTracker\nexport const Report = 1984\nexport type Report = typeof Report\nexport const Reporting = 1984\nexport type Reporting = typeof Reporting\nexport const Label = 1985\nexport type Label = typeof Label\nexport const CommunityPostApproval = 4550\nexport type CommunityPostApproval = typeof CommunityPostApproval\nexport const JobRequest = 5999\nexport type JobRequest = typeof JobRequest\nexport const JobResult = 6999\nexport type JobResult = typeof JobResult\nexport const JobFeedback = 7000\nexport type JobFeedback = typeof JobFeedback\nexport const ZapGoal = 9041\nexport type ZapGoal = typeof ZapGoal\nexport const ZapRequest = 9734\nexport type ZapRequest = typeof ZapRequest\nexport const Zap = 9735\nexport type Zap = typeof Zap\nexport const Highlights = 9802\nexport type Highlights = typeof Highlights\nexport const Mutelist = 10000\nexport type Mutelist = typeof Mutelist\nexport const Pinlist = 10001\nexport type Pinlist = typeof Pinlist\nexport const RelayList = 10002\nexport type RelayList = typeof RelayList\nexport const BookmarkList = 10003\nexport type BookmarkList = typeof BookmarkList\nexport const CommunitiesList = 10004\nexport type CommunitiesList = typeof CommunitiesList\nexport const PublicChatsList = 10005\nexport type PublicChatsList = typeof PublicChatsList\nexport const BlockedRelaysList = 10006\nexport type BlockedRelaysList = typeof BlockedRelaysList\nexport const SearchRelaysList = 10007\nexport type SearchRelaysList = typeof SearchRelaysList\nexport const InterestsList = 10015\nexport type InterestsList = typeof InterestsList\nexport const UserEmojiList = 10030\nexport type UserEmojiList = typeof UserEmojiList\nexport const DirectMessageRelaysList = 10050\nexport type DirectMessageRelaysList = typeof DirectMessageRelaysList\nexport const FileServerPreference = 10096\nexport type FileServerPreference = typeof FileServerPreference\nexport const NWCWalletInfo = 13194\nexport type NWCWalletInfo = typeof NWCWalletInfo\nexport const LightningPubRPC = 21000\nexport type LightningPubRPC = typeof LightningPubRPC\nexport const ClientAuth = 22242\nexport type ClientAuth = typeof ClientAuth\nexport const NWCWalletRequest = 23194\nexport type NWCWalletRequest = typeof NWCWalletRequest\nexport const NWCWalletResponse = 23195\nexport type NWCWalletResponse = typeof NWCWalletResponse\nexport const NostrConnect = 24133\nexport type NostrConnect = typeof NostrConnect\nexport const HTTPAuth = 27235\nexport type HTTPAuth = typeof HTTPAuth\nexport const Followsets = 30000\nexport type Followsets = typeof Followsets\nexport const Genericlists = 30001\nexport type Genericlists = typeof Genericlists\nexport const Relaysets = 30002\nexport type Relaysets = typeof Relaysets\nexport const Bookmarksets = 30003\nexport type Bookmarksets = typeof Bookmarksets\nexport const Curationsets = 30004\nexport type Curationsets = typeof Curationsets\nexport const ProfileBadges = 30008\nexport type ProfileBadges = typeof ProfileBadges\nexport const BadgeDefinition = 30009\nexport type BadgeDefinition = typeof BadgeDefinition\nexport const Interestsets = 30015\nexport type Interestsets = typeof Interestsets\nexport const CreateOrUpdateStall = 30017\nexport type CreateOrUpdateStall = typeof CreateOrUpdateStall\nexport const CreateOrUpdateProduct = 30018\nexport type CreateOrUpdateProduct = typeof CreateOrUpdateProduct\nexport const LongFormArticle = 30023\nexport type LongFormArticle = typeof LongFormArticle\nexport const DraftLong = 30024\nexport type DraftLong = typeof DraftLong\nexport const Emojisets = 30030\nexport type Emojisets = typeof Emojisets\nexport const Application = 30078\nexport type Application = typeof Application\nexport const LiveEvent = 30311\nexport type LiveEvent = typeof LiveEvent\nexport const UserStatuses = 30315\nexport type UserStatuses = typeof UserStatuses\nexport const ClassifiedListing = 30402\nexport type ClassifiedListing = typeof ClassifiedListing\nexport const DraftClassifiedListing = 30403\nexport type DraftClassifiedListing = typeof DraftClassifiedListing\nexport const Date = 31922\nexport type Date = typeof Date\nexport const Time = 31923\nexport type Time = typeof Time\nexport const Calendar = 31924\nexport type Calendar = typeof Calendar\nexport const CalendarEventRSVP = 31925\nexport type CalendarEventRSVP = typeof CalendarEventRSVP\nexport const Handlerrecommendation = 31989\nexport type Handlerrecommendation = typeof Handlerrecommendation\nexport const Handlerinformation = 31990\nexport type Handlerinformation = typeof Handlerinformation\nexport const CommunityDefinition = 34550\nexport type CommunityDefinition = typeof CommunityDefinition\n", "import { Event, EventTemplate } from './core.ts'\nimport { FileMetadata as FileMetadataKind } from './kinds.ts'\n\n/**\n * Type definition for File Metadata as specified in NIP-94.\n * This type is used to represent the metadata associated with a file sharing event (kind: 1063).\n */\nexport type FileMetadataObject = {\n  /**\n   * A description or caption for the file content.\n   */\n  content: string\n\n  /**\n   * The URL to download the file.\n   */\n  url: string\n\n  /**\n   * The MIME type of the file, in lowercase.\n   */\n  m: string\n\n  /**\n   * The SHA-256 hex-encoded string of the file.\n   */\n  x: string\n\n  /**\n   * The SHA-256 hex-encoded string of the original file, before any transformations done by the upload server.\n   */\n  ox: string\n\n  /**\n   * Optional: The size of the file in bytes.\n   */\n  size?: string\n\n  /**\n   * Optional: The dimensions of the file in pixels, in the format \"<width>x<height>\".\n   */\n  dim?: string\n\n  /**\n   * Optional: The URI to the magnet file.\n   */\n  magnet?: string\n\n  /**\n   * Optional: The torrent infohash.\n   */\n  i?: string\n\n  /**\n   * Optional: The blurhash string to show while the file is being loaded by the client.\n   */\n  blurhash?: string\n\n  /**\n   * Optional: The URL of the thumbnail image with the same aspect ratio as the original file.\n   */\n  thumb?: string\n\n  /**\n   * Optional: The URL of a preview image with the same dimensions as the original file.\n   */\n  image?: string\n\n  /**\n   * Optional: A text excerpt or summary of the file's content.\n   */\n  summary?: string\n\n  /**\n   * Optional: A description for accessibility, providing context or a brief description of the file.\n   */\n  alt?: string\n\n  /**\n   * Optional: fallback URLs in case url fails.\n   */\n  fallback?: string[]\n}\n\n/**\n * Generates an event template based on a file metadata object.\n *\n * @param fileMetadata - The file metadata object.\n * @returns The event template.\n */\nexport function generateEventTemplate(fileMetadata: FileMetadataObject): EventTemplate {\n  const eventTemplate: EventTemplate = {\n    content: fileMetadata.content,\n    created_at: Math.floor(Date.now() / 1000),\n    kind: FileMetadataKind,\n    tags: [\n      ['url', fileMetadata.url],\n      ['m', fileMetadata.m],\n      ['x', fileMetadata.x],\n      ['ox', fileMetadata.ox],\n    ],\n  }\n\n  if (fileMetadata.size) eventTemplate.tags.push(['size', fileMetadata.size])\n  if (fileMetadata.dim) eventTemplate.tags.push(['dim', fileMetadata.dim])\n  if (fileMetadata.i) eventTemplate.tags.push(['i', fileMetadata.i])\n  if (fileMetadata.blurhash) eventTemplate.tags.push(['blurhash', fileMetadata.blurhash])\n  if (fileMetadata.thumb) eventTemplate.tags.push(['thumb', fileMetadata.thumb])\n  if (fileMetadata.image) eventTemplate.tags.push(['image', fileMetadata.image])\n  if (fileMetadata.summary) eventTemplate.tags.push(['summary', fileMetadata.summary])\n  if (fileMetadata.alt) eventTemplate.tags.push(['alt', fileMetadata.alt])\n  if (fileMetadata.fallback) fileMetadata.fallback.forEach(url => eventTemplate.tags.push(['fallback', url]))\n\n  return eventTemplate\n}\n\n/**\n * Validates an event to ensure it is a valid file metadata event.\n * @param event - The event to validate.\n * @returns True if the event is valid, false otherwise.\n */\nexport function validateEvent(event: Event): boolean {\n  if (event.kind !== FileMetadataKind) return false\n\n  if (!event.content) return false\n\n  const requiredTags = ['url', 'm', 'x', 'ox'] as const\n  for (const tag of requiredTags) {\n    if (!event.tags.find(([t]) => t == tag)) return false\n  }\n\n  // validate optional size tag\n  const sizeTag = event.tags.find(([t]) => t == 'size')\n  if (sizeTag && isNaN(Number(sizeTag[1]))) return false\n\n  // validate optional dim tag\n  const dimTag = event.tags.find(([t]) => t == 'dim')\n  if (dimTag && !dimTag[1].match(/^\\d+x\\d+$/)) return false\n\n  return true\n}\n\n/**\n * Parses an event and returns a file metadata object.\n * @param event - The event to parse.\n * @returns The file metadata object.\n * @throws Error if the event is invalid.\n */\nexport function parseEvent(event: Event): FileMetadataObject {\n  if (!validateEvent(event)) {\n    throw new Error('Invalid event')\n  }\n\n  const fileMetadata: FileMetadataObject = {\n    content: event.content,\n    url: '',\n    m: '',\n    x: '',\n    ox: '',\n  }\n\n  for (const [tag, value] of event.tags) {\n    switch (tag) {\n      case 'url':\n        fileMetadata.url = value\n        break\n      case 'm':\n        fileMetadata.m = value\n        break\n      case 'x':\n        fileMetadata.x = value\n        break\n      case 'ox':\n        fileMetadata.ox = value\n        break\n      case 'size':\n        fileMetadata.size = value\n        break\n      case 'dim':\n        fileMetadata.dim = value\n        break\n      case 'magnet':\n        fileMetadata.magnet = value\n        break\n      case 'i':\n        fileMetadata.i = value\n        break\n      case 'blurhash':\n        fileMetadata.blurhash = value\n        break\n      case 'thumb':\n        fileMetadata.thumb = value\n        break\n      case 'image':\n        fileMetadata.image = value\n        break\n      case 'summary':\n        fileMetadata.summary = value\n        break\n      case 'alt':\n        fileMetadata.alt = value\n        break\n      case 'fallback':\n        fileMetadata.fallback ??= []\n        fileMetadata.fallback.push(value)\n        break\n    }\n  }\n\n  return fileMetadata\n}\n"],
  "mappings": "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",
  "names": []
}
