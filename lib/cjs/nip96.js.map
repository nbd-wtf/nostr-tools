{
  "version": 3,
  "sources": ["../../nip96.ts", "../../kinds.ts"],
  "sourcesContent": ["import { sha256 } from '@noble/hashes/sha256'\nimport { EventTemplate } from './core.ts'\nimport { FileServerPreference } from './kinds.ts'\nimport { bytesToHex } from '@noble/hashes/utils'\n\n/**\n * Represents the configuration for a server compliant with NIP-96.\n */\nexport type ServerConfiguration = {\n  /**\n   * The base URL from which file upload and deletion operations are served.\n   * Also used for downloads if \"download_url\" is not specified.\n   */\n  api_url: string\n\n  /**\n   * Optional. The base URL from which files are downloaded.\n   * Used if different from the \"api_url\".\n   */\n  download_url?: string\n\n  /**\n   * Optional. URL of another HTTP file storage server's configuration.\n   * Used by nostr relays to delegate to another server.\n   * In this case, \"api_url\" must be an empty string.\n   */\n  delegated_to_url?: string\n\n  /**\n   * Optional. An array of NIP numbers that this server supports.\n   */\n  supported_nips?: number[]\n\n  /**\n   * Optional. URL to the server's Terms of Service.\n   */\n  tos_url?: string\n\n  /**\n   * Optional. An array of MIME types supported by the server.\n   */\n  content_types?: string[]\n\n  /**\n   * Optional. Defines various storage plans offered by the server.\n   */\n  plans?: {\n    [planKey: string]: {\n      /**\n       * The name of the storage plan.\n       */\n      name: string\n\n      /**\n       * Optional. Indicates whether NIP-98 is required for uploads in this plan.\n       */\n      is_nip98_required?: boolean\n\n      /**\n       * Optional. URL to a landing page providing more information about the plan.\n       */\n      url?: string\n\n      /**\n       * Optional. The maximum file size allowed under this plan, in bytes.\n       */\n      max_byte_size?: number\n\n      /**\n       * Optional. Defines the range of file expiration in days.\n       * The first value indicates the minimum expiration time, and the second value indicates the maximum.\n       * A value of 0 indicates no expiration.\n       */\n      file_expiration?: [number, number]\n\n      /**\n       * Optional. Specifies the types of media transformations supported under this plan.\n       * Currently, only image transformations are considered.\n       */\n      media_transformations?: {\n        /**\n         * Optional. An array of supported image transformation types.\n         */\n        image?: string[]\n      }\n    }\n  }\n}\n\n/**\n * Represents the optional form data fields for file upload in accordance with NIP-96.\n */\nexport type OptionalFormDataFields = {\n  /**\n   * Specifies the desired expiration time of the file on the server.\n   * It should be a string representing a UNIX timestamp in seconds.\n   * An empty string indicates that the file should be stored indefinitely.\n   */\n  expiration?: string\n\n  /**\n   * Indicates the size of the file in bytes.\n   * This field can be used by the server to pre-validate the file size before processing the upload.\n   */\n  size?: string\n\n  /**\n   * Provides a strict description of the file for accessibility purposes,\n   * particularly useful for visibility-impaired users.\n   */\n  alt?: string\n\n  /**\n   * A loose, more descriptive caption for the file.\n   * This can be used for additional context or commentary about the file.\n   */\n  caption?: string\n\n  /**\n   * Specifies the intended use of the file.\n   * Can be either 'avatar' or 'banner', indicating if the file is to be used as an avatar or a banner.\n   * Absence of this field suggests standard file upload without special treatment.\n   */\n  media_type?: 'avatar' | 'banner'\n\n  /**\n   * The MIME type of the file being uploaded.\n   * This can be used for early rejection by the server if the file type isn't supported.\n   */\n  content_type?: string\n\n  /**\n   * Other custom form data fields.\n   */\n  [key: string]: string | undefined\n}\n\n/**\n * Type representing the response from a NIP-96 compliant server after a file upload request.\n */\nexport type FileUploadResponse = {\n  /**\n   * The status of the upload request.\n   * - 'success': Indicates the file was successfully uploaded.\n   * - 'error': Indicates there was an error in the upload process.\n   * - 'processing': Indicates the file is still being processed (used in cases of delayed processing).\n   */\n  status: 'success' | 'error' | 'processing'\n\n  /**\n   * A message provided by the server, which could be a success message, error description, or processing status.\n   */\n  message: string\n\n  /**\n   * Optional. A URL provided by the server where the upload processing status can be checked.\n   * This is relevant in cases where the file upload involves delayed processing.\n   */\n  processing_url?: string\n\n  /**\n   * Optional. An event object conforming to NIP-94, which includes details about the uploaded file.\n   * This object is typically provided in the response for a successful upload and contains\n   * essential information such as the download URL and file metadata.\n   */\n  nip94_event?: {\n    /**\n     * A collection of key-value pairs (tags) providing metadata about the uploaded file.\n     * Standard tags include:\n     * - 'url': The URL where the file can be accessed.\n     * - 'ox': The SHA-256 hash of the original file before any server-side transformations.\n     * Additional optional tags might include file dimensions, MIME type, etc.\n     */\n    tags: Array<[string, string]>\n\n    /**\n     * A content field, which is typically empty for file upload events but included for consistency with the NIP-94 structure.\n     */\n    content: string\n  }\n}\n\n/**\n * Type representing the response from a NIP-96 compliant server after a delayed processing request.\n */\nexport type DelayedProcessingResponse = {\n  /**\n   * The status of the delayed processing request.\n   * - 'processing': Indicates the file is still being processed.\n   * - 'error': Indicates there was an error in the processing.\n   */\n  status: 'processing' | 'error'\n\n  /**\n   * A message provided by the server, which could be a success message or error description.\n   */\n  message: string\n\n  /**\n   * The percentage of the file that has been processed. This is a number between 0 and 100.\n   */\n  percentage: number\n}\n\n/**\n * Validates the server configuration.\n *\n * @param config - The server configuration object.\n * @returns True if the configuration is valid, false otherwise.\n */\nexport function validateServerConfiguration(config: ServerConfiguration): boolean {\n  if (Boolean(config.api_url) == false) {\n    return false\n  }\n\n  if (Boolean(config.delegated_to_url) && Boolean(config.api_url)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Fetches, parses, and validates the server configuration from the given URL.\n *\n * @param serverUrl The URL of the server.\n * @returns The server configuration, or an error if the configuration could not be fetched or parsed.\n */\nexport async function readServerConfig(serverUrl: string): Promise<ServerConfiguration> {\n  const HTTPROUTE = '/.well-known/nostr/nip96.json' as const\n  let fetchUrl = ''\n\n  try {\n    const { origin } = new URL(serverUrl)\n    fetchUrl = origin + HTTPROUTE\n  } catch (error) {\n    throw new Error('Invalid URL')\n  }\n\n  try {\n    const response = await fetch(fetchUrl)\n\n    if (!response.ok) {\n      throw new Error(`Error fetching ${fetchUrl}: ${response.statusText}`)\n    }\n\n    const data: any = await response.json()\n\n    if (!data) {\n      throw new Error('No data')\n    }\n\n    if (!validateServerConfiguration(data)) {\n      throw new Error('Invalid configuration data')\n    }\n\n    return data\n  } catch (_) {\n    throw new Error(`Error fetching.`)\n  }\n}\n\n/**\n * Validates if the given object is a valid FileUploadResponse.\n *\n * @param response - The object to validate.\n * @returns true if the object is a valid FileUploadResponse, otherwise false.\n */\nexport function validateFileUploadResponse(response: any): response is FileUploadResponse {\n  if (typeof response !== 'object' || response === null) return false\n\n  if (!response.status || !response.message) {\n    return false\n  }\n\n  if (response.status !== 'success' && response.status !== 'error' && response.status !== 'processing') {\n    return false\n  }\n\n  if (typeof response.message !== 'string') {\n    return false\n  }\n\n  if (response.status === 'processing' && !response.processing_url) {\n    return false\n  }\n\n  if (response.processing_url) {\n    if (typeof response.processing_url !== 'string') {\n      return false\n    }\n  }\n\n  if (response.status === 'success' && !response.nip94_event) {\n    return false\n  }\n\n  if (response.nip94_event) {\n    if (\n      !response.nip94_event.tags ||\n      !Array.isArray(response.nip94_event.tags) ||\n      response.nip94_event.tags.length === 0\n    ) {\n      return false\n    }\n\n    for (const tag of response.nip94_event.tags) {\n      if (!Array.isArray(tag) || tag.length !== 2) return false\n\n      if (typeof tag[0] !== 'string' || typeof tag[1] !== 'string') return false\n    }\n\n    if (!(response.nip94_event.tags as string[]).find(t => t[0] === 'url')) {\n      return false\n    }\n\n    if (!(response.nip94_event.tags as string[]).find(t => t[0] === 'ox')) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Uploads a file to a NIP-96 compliant server.\n *\n * @param file - The file to be uploaded.\n * @param serverApiUrl - The API URL of the server, retrieved from the server's configuration.\n * @param nip98AuthorizationHeader - The authorization header from NIP-98.\n * @param optionalFormDataFields - Optional form data fields.\n * @returns A promise that resolves to the server's response.\n */\nexport async function uploadFile(\n  file: File,\n  serverApiUrl: string,\n  nip98AuthorizationHeader: string,\n  optionalFormDataFields?: OptionalFormDataFields,\n): Promise<FileUploadResponse> {\n  // Create FormData object\n  const formData = new FormData()\n\n  // Append optional fields to FormData\n  optionalFormDataFields &&\n    Object.entries(optionalFormDataFields).forEach(([key, value]) => {\n      if (value) {\n        formData.append(key, value)\n      }\n    })\n\n  // Append the file to FormData as the last field\n  formData.append('file', file)\n\n  // Make the POST request to the server\n  const response = await fetch(serverApiUrl, {\n    method: 'POST',\n    headers: {\n      Authorization: nip98AuthorizationHeader,\n    },\n    body: formData,\n  })\n\n  if (response.ok === false) {\n    // 413 Payload Too Large\n    if (response.status === 413) {\n      throw new Error('File too large!')\n    }\n\n    // 400 Bad Request\n    if (response.status === 400) {\n      throw new Error('Bad request! Some fields are missing or invalid!')\n    }\n\n    // 403 Forbidden\n    if (response.status === 403) {\n      throw new Error('Forbidden! Payload tag does not match the requested file!')\n    }\n\n    // 402 Payment Required\n    if (response.status === 402) {\n      throw new Error('Payment required!')\n    }\n\n    // unknown error\n    throw new Error('Unknown error in uploading file!')\n  }\n\n  try {\n    const parsedResponse = await response.json()\n\n    if (!validateFileUploadResponse(parsedResponse)) {\n      throw new Error('Invalid response from the server!')\n    }\n\n    return parsedResponse\n  } catch (error) {\n    throw new Error('Error parsing JSON response!')\n  }\n}\n\n/**\n * Generates the URL for downloading a file from a NIP-96 compliant server.\n *\n * @param fileHash - The SHA-256 hash of the original file.\n * @param serverDownloadUrl - The base URL provided by the server, retrieved from the server's configuration.\n * @param fileExtension - An optional parameter that specifies the file extension (e.g., '.jpg', '.png').\n * @returns A string representing the complete URL to download the file.\n *\n */\nexport function generateDownloadUrl(fileHash: string, serverDownloadUrl: string, fileExtension?: string): string {\n  // Construct the base download URL using the file hash\n  let downloadUrl = `${serverDownloadUrl}/${fileHash}`\n\n  // Append the file extension if provided\n  if (fileExtension) {\n    downloadUrl += fileExtension\n  }\n\n  return downloadUrl\n}\n\n/**\n * Sends a request to delete a file from a NIP-96 compliant server.\n *\n * @param fileHash - The SHA-256 hash of the original file.\n * @param serverApiUrl - The base API URL of the server, retrieved from the server's configuration.\n * @param nip98AuthorizationHeader - The authorization header from NIP-98.\n * @returns A promise that resolves to the server's response to the deletion request.\n *\n */\nexport async function deleteFile(\n  fileHash: string,\n  serverApiUrl: string,\n  nip98AuthorizationHeader: string,\n): Promise<any> {\n  // make sure the serverApiUrl ends with a slash\n  if (!serverApiUrl.endsWith('/')) {\n    serverApiUrl += '/'\n  }\n\n  // Construct the URL for the delete request\n  const deleteUrl = `${serverApiUrl}${fileHash}`\n\n  // Send the DELETE request\n  const response = await fetch(deleteUrl, {\n    method: 'DELETE',\n    headers: {\n      Authorization: nip98AuthorizationHeader,\n    },\n  })\n\n  // Handle the response\n  if (!response.ok) {\n    throw new Error('Error deleting file!')\n  }\n\n  // Return the response from the server\n  try {\n    return await response.json()\n  } catch (error) {\n    throw new Error('Error parsing JSON response!')\n  }\n}\n\n/**\n * Validates the server's response to a delayed processing request.\n *\n * @param response - The server's response to a delayed processing request.\n * @returns A boolean indicating whether the response is valid.\n */\nexport function validateDelayedProcessingResponse(response: any): response is DelayedProcessingResponse {\n  if (typeof response !== 'object' || response === null) return false\n\n  if (!response.status || !response.message || !response.percentage) {\n    return false\n  }\n\n  if (response.status !== 'processing' && response.status !== 'error') {\n    return false\n  }\n\n  if (typeof response.message !== 'string') {\n    return false\n  }\n\n  if (typeof response.percentage !== 'number') {\n    return false\n  }\n\n  if (Number(response.percentage) < 0 || Number(response.percentage) > 100) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Checks the processing status of a file when delayed processing is used.\n *\n * @param processingUrl - The URL provided by the server where the processing status can be checked.\n * @returns A promise that resolves to an object containing the processing status and other relevant information.\n */\nexport async function checkFileProcessingStatus(\n  processingUrl: string,\n): Promise<FileUploadResponse | DelayedProcessingResponse> {\n  // Make the GET request to the processing URL\n  const response = await fetch(processingUrl)\n\n  // Handle the response\n  if (!response.ok) {\n    throw new Error(`Failed to retrieve processing status. Server responded with status: ${response.status}`)\n  }\n\n  // Parse the response\n  try {\n    const parsedResponse = await response.json()\n\n    // 201 Created: Indicates the processing is over.\n    if (response.status === 201) {\n      // Validate the response\n      if (!validateFileUploadResponse(parsedResponse)) {\n        throw new Error('Invalid response from the server!')\n      }\n\n      return parsedResponse\n    }\n\n    // 200 OK: Indicates the processing is still ongoing.\n    if (response.status === 200) {\n      // Validate the response\n      if (!validateDelayedProcessingResponse(parsedResponse)) {\n        throw new Error('Invalid response from the server!')\n      }\n\n      return parsedResponse\n    }\n\n    throw new Error('Invalid response from the server!')\n  } catch (error) {\n    throw new Error('Error parsing JSON response!')\n  }\n}\n\n/**\n * Generates an event template to indicate a user's File Server Preferences.\n * This event is of kind 10096 and is used to specify one or more preferred servers for file uploads.\n *\n * @param serverUrls - An array of URLs representing the user's preferred file storage servers.\n * @returns An object representing a Nostr event template for setting file server preferences.\n */\nexport function generateFSPEventTemplate(serverUrls: string[]): EventTemplate {\n  serverUrls = serverUrls.filter(serverUrl => {\n    try {\n      new URL(serverUrl)\n      return true\n    } catch (error) {\n      return false\n    }\n  })\n\n  return {\n    kind: FileServerPreference,\n    content: '',\n    tags: serverUrls.map(serverUrl => ['server', serverUrl]),\n    created_at: Math.floor(Date.now() / 1000),\n  }\n}\n\n/**\n * Calculates the SHA-256 hash of a given file. This hash is used in various NIP-96 operations,\n * such as file upload, download, and deletion, to uniquely identify files.\n *\n * @param file - The file for which the SHA-256 hash needs to be calculated.\n * @returns A promise that resolves to the SHA-256 hash of the file.\n */\nexport async function calculateFileHash(file: Blob): Promise<string> {\n  return bytesToHex(sha256(new Uint8Array(await file.arrayBuffer())))\n}\n", "import { NostrEvent, validateEvent } from './pure.ts'\n\n/** Events are **regular**, which means they're all expected to be stored by relays. */\nexport function isRegularKind(kind: number): boolean {\n  return (1000 <= kind && kind < 10000) || [1, 2, 4, 5, 6, 7, 8, 16, 40, 41, 42, 43, 44].includes(kind)\n}\n\n/** Events are **replaceable**, which means that, for each combination of `pubkey` and `kind`, only the latest event is expected to (SHOULD) be stored by relays, older versions are expected to be discarded. */\nexport function isReplaceableKind(kind: number): boolean {\n  return [0, 3].includes(kind) || (10000 <= kind && kind < 20000)\n}\n\n/** Events are **ephemeral**, which means they are not expected to be stored by relays. */\nexport function isEphemeralKind(kind: number): boolean {\n  return 20000 <= kind && kind < 30000\n}\n\n/** Events are **parameterized replaceable**, which means that, for each combination of `pubkey`, `kind` and the `d` tag, only the latest event is expected to be stored by relays, older versions are expected to be discarded. */\nexport function isParameterizedReplaceableKind(kind: number): boolean {\n  return 30000 <= kind && kind < 40000\n}\n\n/** Classification of the event kind. */\nexport type KindClassification = 'regular' | 'replaceable' | 'ephemeral' | 'parameterized' | 'unknown'\n\n/** Determine the classification of this kind of event if known, or `unknown`. */\nexport function classifyKind(kind: number): KindClassification {\n  if (isRegularKind(kind)) return 'regular'\n  if (isReplaceableKind(kind)) return 'replaceable'\n  if (isEphemeralKind(kind)) return 'ephemeral'\n  if (isParameterizedReplaceableKind(kind)) return 'parameterized'\n  return 'unknown'\n}\n\nexport function isKind<T extends number>(event: unknown, kind: T | Array<T>): event is NostrEvent & { kind: T } {\n  const kindAsArray: number[] = kind instanceof Array ? kind : [kind]\n  return (validateEvent(event) && kindAsArray.includes(event.kind)) || false\n}\n\nexport const Metadata = 0\nexport type Metadata = typeof Metadata\nexport const ShortTextNote = 1\nexport type ShortTextNote = typeof ShortTextNote\nexport const RecommendRelay = 2\nexport type RecommendRelay = typeof RecommendRelay\nexport const Contacts = 3\nexport type Contacts = typeof Contacts\nexport const EncryptedDirectMessage = 4\nexport type EncryptedDirectMessage = typeof EncryptedDirectMessage\nexport const EventDeletion = 5\nexport type EventDeletion = typeof EventDeletion\nexport const Repost = 6\nexport type Repost = typeof Repost\nexport const Reaction = 7\nexport type Reaction = typeof Reaction\nexport const BadgeAward = 8\nexport type BadgeAward = typeof BadgeAward\nexport const Seal = 13\nexport type Seal = typeof Seal\nexport const PrivateDirectMessage = 14\nexport type PrivateDirectMessage = typeof PrivateDirectMessage\nexport const GenericRepost = 16\nexport type GenericRepost = typeof GenericRepost\nexport const ChannelCreation = 40\nexport type ChannelCreation = typeof ChannelCreation\nexport const ChannelMetadata = 41\nexport type ChannelMetadata = typeof ChannelMetadata\nexport const ChannelMessage = 42\nexport type ChannelMessage = typeof ChannelMessage\nexport const ChannelHideMessage = 43\nexport type ChannelHideMessage = typeof ChannelHideMessage\nexport const ChannelMuteUser = 44\nexport type ChannelMuteUser = typeof ChannelMuteUser\nexport const OpenTimestamps = 1040\nexport type OpenTimestamps = typeof OpenTimestamps\nexport const GiftWrap = 1059\nexport type GiftWrap = typeof GiftWrap\nexport const FileMetadata = 1063\nexport type FileMetadata = typeof FileMetadata\nexport const LiveChatMessage = 1311\nexport type LiveChatMessage = typeof LiveChatMessage\nexport const ProblemTracker = 1971\nexport type ProblemTracker = typeof ProblemTracker\nexport const Report = 1984\nexport type Report = typeof Report\nexport const Reporting = 1984\nexport type Reporting = typeof Reporting\nexport const Label = 1985\nexport type Label = typeof Label\nexport const CommunityPostApproval = 4550\nexport type CommunityPostApproval = typeof CommunityPostApproval\nexport const JobRequest = 5999\nexport type JobRequest = typeof JobRequest\nexport const JobResult = 6999\nexport type JobResult = typeof JobResult\nexport const JobFeedback = 7000\nexport type JobFeedback = typeof JobFeedback\nexport const ZapGoal = 9041\nexport type ZapGoal = typeof ZapGoal\nexport const ZapRequest = 9734\nexport type ZapRequest = typeof ZapRequest\nexport const Zap = 9735\nexport type Zap = typeof Zap\nexport const Highlights = 9802\nexport type Highlights = typeof Highlights\nexport const Mutelist = 10000\nexport type Mutelist = typeof Mutelist\nexport const Pinlist = 10001\nexport type Pinlist = typeof Pinlist\nexport const RelayList = 10002\nexport type RelayList = typeof RelayList\nexport const BookmarkList = 10003\nexport type BookmarkList = typeof BookmarkList\nexport const CommunitiesList = 10004\nexport type CommunitiesList = typeof CommunitiesList\nexport const PublicChatsList = 10005\nexport type PublicChatsList = typeof PublicChatsList\nexport const BlockedRelaysList = 10006\nexport type BlockedRelaysList = typeof BlockedRelaysList\nexport const SearchRelaysList = 10007\nexport type SearchRelaysList = typeof SearchRelaysList\nexport const InterestsList = 10015\nexport type InterestsList = typeof InterestsList\nexport const UserEmojiList = 10030\nexport type UserEmojiList = typeof UserEmojiList\nexport const DirectMessageRelaysList = 10050\nexport type DirectMessageRelaysList = typeof DirectMessageRelaysList\nexport const FileServerPreference = 10096\nexport type FileServerPreference = typeof FileServerPreference\nexport const NWCWalletInfo = 13194\nexport type NWCWalletInfo = typeof NWCWalletInfo\nexport const LightningPubRPC = 21000\nexport type LightningPubRPC = typeof LightningPubRPC\nexport const ClientAuth = 22242\nexport type ClientAuth = typeof ClientAuth\nexport const NWCWalletRequest = 23194\nexport type NWCWalletRequest = typeof NWCWalletRequest\nexport const NWCWalletResponse = 23195\nexport type NWCWalletResponse = typeof NWCWalletResponse\nexport const NostrConnect = 24133\nexport type NostrConnect = typeof NostrConnect\nexport const HTTPAuth = 27235\nexport type HTTPAuth = typeof HTTPAuth\nexport const Followsets = 30000\nexport type Followsets = typeof Followsets\nexport const Genericlists = 30001\nexport type Genericlists = typeof Genericlists\nexport const Relaysets = 30002\nexport type Relaysets = typeof Relaysets\nexport const Bookmarksets = 30003\nexport type Bookmarksets = typeof Bookmarksets\nexport const Curationsets = 30004\nexport type Curationsets = typeof Curationsets\nexport const ProfileBadges = 30008\nexport type ProfileBadges = typeof ProfileBadges\nexport const BadgeDefinition = 30009\nexport type BadgeDefinition = typeof BadgeDefinition\nexport const Interestsets = 30015\nexport type Interestsets = typeof Interestsets\nexport const CreateOrUpdateStall = 30017\nexport type CreateOrUpdateStall = typeof CreateOrUpdateStall\nexport const CreateOrUpdateProduct = 30018\nexport type CreateOrUpdateProduct = typeof CreateOrUpdateProduct\nexport const LongFormArticle = 30023\nexport type LongFormArticle = typeof LongFormArticle\nexport const DraftLong = 30024\nexport type DraftLong = typeof DraftLong\nexport const Emojisets = 30030\nexport type Emojisets = typeof Emojisets\nexport const Application = 30078\nexport type Application = typeof Application\nexport const LiveEvent = 30311\nexport type LiveEvent = typeof LiveEvent\nexport const UserStatuses = 30315\nexport type UserStatuses = typeof UserStatuses\nexport const ClassifiedListing = 30402\nexport type ClassifiedListing = typeof ClassifiedListing\nexport const DraftClassifiedListing = 30403\nexport type DraftClassifiedListing = typeof DraftClassifiedListing\nexport const Date = 31922\nexport type Date = typeof Date\nexport const Time = 31923\nexport type Time = typeof Time\nexport const Calendar = 31924\nexport type Calendar = typeof Calendar\nexport const CalendarEventRSVP = 31925\nexport type CalendarEventRSVP = typeof CalendarEventRSVP\nexport const Handlerrecommendation = 31989\nexport type Handlerrecommendation = typeof Handlerrecommendation\nexport const Handlerinformation = 31990\nexport type Handlerinformation = typeof Handlerinformation\nexport const CommunityDefinition = 34550\nexport type CommunityDefinition = typeof CommunityDefinition\n"],
  "mappings": "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",
  "names": []
}
