{
  "version": 3,
  "sources": ["../../nip99.ts", "../../kinds.ts"],
  "sourcesContent": ["import { Event, EventTemplate } from './core.ts'\nimport { ClassifiedListing, DraftClassifiedListing } from './kinds.ts'\n\n/**\n * Represents the details of a price.\n * @example { amount: '100', currency: 'USD', frequency: 'month' }\n * @example { amount: '100', currency: 'EUR' }\n */\nexport type PriceDetails = {\n  /**\n   * The amount of the price.\n   */\n  amount: string\n  /**\n   * The currency of the price in 3-letter ISO 4217 format.\n   * @example 'USD'\n   */\n  currency: string\n  /**\n   * The optional frequency of payment.\n   * Can be one of: 'hour', 'day', 'week', 'month', 'year', or a custom string.\n   */\n  frequency?: string\n}\n\n/**\n * Represents a classified listing object.\n */\nexport type ClassifiedListingObject = {\n  /**\n   * Whether the listing is a draft or not.\n   */\n  isDraft: boolean\n  /**\n   * A title of the listing.\n   */\n  title: string\n  /**\n   * A short summary or tagline.\n   */\n  summary: string\n  /**\n   * A description in Markdown format.\n   */\n  content: string\n  /**\n   * Timestamp in unix seconds of when the listing was published.\n   */\n  publishedAt: string\n  /**\n   * Location of the listing.\n   * @example 'NYC'\n   */\n  location: string\n  /**\n   * Price details.\n   */\n  price: PriceDetails\n  /**\n   * Images of the listing with optional dimensions.\n   */\n  images: Array<{\n    url: string\n    dimensions?: string\n  }>\n  /**\n   * Tags/Hashtags (i.e. categories, keywords, etc.)\n   */\n  hashtags: string[]\n  /**\n   * Other standard tags.\n   * @example \"g\", a geohash for more precise location\n   */\n  additionalTags: Record<string, string | string[]>\n}\n\n/**\n * Validates an event to ensure it is a valid classified listing event.\n * @param event - The event to validate.\n * @returns True if the event is valid, false otherwise.\n */\nexport function validateEvent(event: Event): boolean {\n  if (![ClassifiedListing, DraftClassifiedListing].includes(event.kind)) return false\n\n  const requiredTags = ['d', 'title', 'summary', 'location', 'published_at', 'price']\n  const requiredTagCount = requiredTags.length\n  const tagCounts: Record<string, number> = {}\n\n  if (event.tags.length < requiredTagCount) return false\n\n  for (const tag of event.tags) {\n    if (tag.length < 2) return false\n\n    const [tagName, ...tagValues] = tag\n\n    if (tagName == 'published_at') {\n      const timestamp = parseInt(tagValues[0])\n      if (isNaN(timestamp)) return false\n    } else if (tagName == 'price') {\n      if (tagValues.length < 2) return false\n\n      const price = parseInt(tagValues[0])\n      if (isNaN(price) || tagValues[1].length != 3) return false\n    } else if ((tagName == 'e' || tagName == 'a') && tag.length != 3) {\n      return false\n    }\n\n    if (requiredTags.includes(tagName)) {\n      tagCounts[tagName] = (tagCounts[tagName] || 0) + 1\n    }\n  }\n\n  return Object.values(tagCounts).every(count => count == 1) && Object.keys(tagCounts).length == requiredTagCount\n}\n\n/**\n * Parses an event and returns a classified listing object.\n * @param event - The event to parse.\n * @returns The classified listing object.\n * @throws Error if the event is invalid.\n */\nexport function parseEvent(event: Event): ClassifiedListingObject {\n  if (!validateEvent(event)) {\n    throw new Error('Invalid event')\n  }\n\n  const listing: ClassifiedListingObject = {\n    isDraft: event.kind === DraftClassifiedListing,\n    title: '',\n    summary: '',\n    content: event.content,\n    publishedAt: '',\n    location: '',\n    price: {\n      amount: '',\n      currency: '',\n    },\n    images: [],\n    hashtags: [],\n    additionalTags: {},\n  }\n\n  for (let i = 0; i < event.tags.length; i++) {\n    const tag = event.tags[i]\n    const [tagName, ...tagValues] = tag\n\n    if (tagName == 'title') {\n      listing.title = tagValues[0]\n    } else if (tagName == 'summary') {\n      listing.summary = tagValues[0]\n    } else if (tagName == 'published_at') {\n      listing.publishedAt = tagValues[0]\n    } else if (tagName == 'location') {\n      listing.location = tagValues[0]\n    } else if (tagName == 'price') {\n      listing.price.amount = tagValues[0]\n      listing.price.currency = tagValues[1]\n\n      if (tagValues.length == 3) {\n        listing.price.frequency = tagValues[2]\n      }\n    } else if (tagName == 'image') {\n      listing.images.push({\n        url: tagValues[0],\n        dimensions: tagValues?.[1] ?? undefined,\n      })\n    } else if (tagName == 't') {\n      listing.hashtags.push(tagValues[0])\n    } else if (tagName == 'e' || tagName == 'a') {\n      listing.additionalTags[tagName] = [...tagValues]\n    }\n  }\n\n  return listing\n}\n\n/**\n * Generates an event template based on a classified listing object.\n *\n * @param listing - The classified listing object.\n * @returns The event template.\n */\nexport function generateEventTemplate(listing: ClassifiedListingObject): EventTemplate {\n  const priceTag = ['price', listing.price.amount, listing.price.currency]\n  if (listing.price.frequency) priceTag.push(listing.price.frequency)\n\n  const tags: string[][] = [\n    ['d', listing.title.trim().toLowerCase().replace(/ /g, '-')],\n    ['title', listing.title],\n    ['published_at', listing.publishedAt],\n    ['summary', listing.summary],\n    ['location', listing.location],\n    priceTag,\n  ]\n\n  for (let i = 0; i < listing.images.length; i++) {\n    const image = listing.images[i]\n    const imageTag = ['image', image.url]\n    if (image.dimensions) imageTag.push(image.dimensions)\n\n    tags.push(imageTag)\n  }\n\n  for (let i = 0; i < listing.hashtags.length; i++) {\n    const t = listing.hashtags[i]\n\n    tags.push(['t', t])\n  }\n\n  for (const [key, value] of Object.entries(listing.additionalTags)) {\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        const val = value[i]\n\n        tags.push([key, val])\n      }\n    } else {\n      tags.push([key, value])\n    }\n  }\n\n  return {\n    kind: listing.isDraft ? DraftClassifiedListing : ClassifiedListing,\n    content: listing.content,\n    tags,\n    created_at: Math.floor(Date.now() / 1000),\n  }\n}\n", "import { NostrEvent, validateEvent } from './pure.ts'\n\n/** Events are **regular**, which means they're all expected to be stored by relays. */\nexport function isRegularKind(kind: number): boolean {\n  return (1000 <= kind && kind < 10000) || [1, 2, 4, 5, 6, 7, 8, 16, 40, 41, 42, 43, 44].includes(kind)\n}\n\n/** Events are **replaceable**, which means that, for each combination of `pubkey` and `kind`, only the latest event is expected to (SHOULD) be stored by relays, older versions are expected to be discarded. */\nexport function isReplaceableKind(kind: number): boolean {\n  return [0, 3].includes(kind) || (10000 <= kind && kind < 20000)\n}\n\n/** Events are **ephemeral**, which means they are not expected to be stored by relays. */\nexport function isEphemeralKind(kind: number): boolean {\n  return 20000 <= kind && kind < 30000\n}\n\n/** Events are **parameterized replaceable**, which means that, for each combination of `pubkey`, `kind` and the `d` tag, only the latest event is expected to be stored by relays, older versions are expected to be discarded. */\nexport function isParameterizedReplaceableKind(kind: number): boolean {\n  return 30000 <= kind && kind < 40000\n}\n\n/** Classification of the event kind. */\nexport type KindClassification = 'regular' | 'replaceable' | 'ephemeral' | 'parameterized' | 'unknown'\n\n/** Determine the classification of this kind of event if known, or `unknown`. */\nexport function classifyKind(kind: number): KindClassification {\n  if (isRegularKind(kind)) return 'regular'\n  if (isReplaceableKind(kind)) return 'replaceable'\n  if (isEphemeralKind(kind)) return 'ephemeral'\n  if (isParameterizedReplaceableKind(kind)) return 'parameterized'\n  return 'unknown'\n}\n\nexport function isKind<T extends number>(event: unknown, kind: T | Array<T>): event is NostrEvent & { kind: T } {\n  const kindAsArray: number[] = kind instanceof Array ? kind : [kind]\n  return (validateEvent(event) && kindAsArray.includes(event.kind)) || false\n}\n\nexport const Metadata = 0\nexport type Metadata = typeof Metadata\nexport const ShortTextNote = 1\nexport type ShortTextNote = typeof ShortTextNote\nexport const RecommendRelay = 2\nexport type RecommendRelay = typeof RecommendRelay\nexport const Contacts = 3\nexport type Contacts = typeof Contacts\nexport const EncryptedDirectMessage = 4\nexport type EncryptedDirectMessage = typeof EncryptedDirectMessage\nexport const EventDeletion = 5\nexport type EventDeletion = typeof EventDeletion\nexport const Repost = 6\nexport type Repost = typeof Repost\nexport const Reaction = 7\nexport type Reaction = typeof Reaction\nexport const BadgeAward = 8\nexport type BadgeAward = typeof BadgeAward\nexport const Seal = 13\nexport type Seal = typeof Seal\nexport const PrivateDirectMessage = 14\nexport type PrivateDirectMessage = typeof PrivateDirectMessage\nexport const GenericRepost = 16\nexport type GenericRepost = typeof GenericRepost\nexport const ChannelCreation = 40\nexport type ChannelCreation = typeof ChannelCreation\nexport const ChannelMetadata = 41\nexport type ChannelMetadata = typeof ChannelMetadata\nexport const ChannelMessage = 42\nexport type ChannelMessage = typeof ChannelMessage\nexport const ChannelHideMessage = 43\nexport type ChannelHideMessage = typeof ChannelHideMessage\nexport const ChannelMuteUser = 44\nexport type ChannelMuteUser = typeof ChannelMuteUser\nexport const OpenTimestamps = 1040\nexport type OpenTimestamps = typeof OpenTimestamps\nexport const GiftWrap = 1059\nexport type GiftWrap = typeof GiftWrap\nexport const FileMetadata = 1063\nexport type FileMetadata = typeof FileMetadata\nexport const LiveChatMessage = 1311\nexport type LiveChatMessage = typeof LiveChatMessage\nexport const ProblemTracker = 1971\nexport type ProblemTracker = typeof ProblemTracker\nexport const Report = 1984\nexport type Report = typeof Report\nexport const Reporting = 1984\nexport type Reporting = typeof Reporting\nexport const Label = 1985\nexport type Label = typeof Label\nexport const CommunityPostApproval = 4550\nexport type CommunityPostApproval = typeof CommunityPostApproval\nexport const JobRequest = 5999\nexport type JobRequest = typeof JobRequest\nexport const JobResult = 6999\nexport type JobResult = typeof JobResult\nexport const JobFeedback = 7000\nexport type JobFeedback = typeof JobFeedback\nexport const ZapGoal = 9041\nexport type ZapGoal = typeof ZapGoal\nexport const ZapRequest = 9734\nexport type ZapRequest = typeof ZapRequest\nexport const Zap = 9735\nexport type Zap = typeof Zap\nexport const Highlights = 9802\nexport type Highlights = typeof Highlights\nexport const Mutelist = 10000\nexport type Mutelist = typeof Mutelist\nexport const Pinlist = 10001\nexport type Pinlist = typeof Pinlist\nexport const RelayList = 10002\nexport type RelayList = typeof RelayList\nexport const BookmarkList = 10003\nexport type BookmarkList = typeof BookmarkList\nexport const CommunitiesList = 10004\nexport type CommunitiesList = typeof CommunitiesList\nexport const PublicChatsList = 10005\nexport type PublicChatsList = typeof PublicChatsList\nexport const BlockedRelaysList = 10006\nexport type BlockedRelaysList = typeof BlockedRelaysList\nexport const SearchRelaysList = 10007\nexport type SearchRelaysList = typeof SearchRelaysList\nexport const InterestsList = 10015\nexport type InterestsList = typeof InterestsList\nexport const UserEmojiList = 10030\nexport type UserEmojiList = typeof UserEmojiList\nexport const DirectMessageRelaysList = 10050\nexport type DirectMessageRelaysList = typeof DirectMessageRelaysList\nexport const FileServerPreference = 10096\nexport type FileServerPreference = typeof FileServerPreference\nexport const NWCWalletInfo = 13194\nexport type NWCWalletInfo = typeof NWCWalletInfo\nexport const LightningPubRPC = 21000\nexport type LightningPubRPC = typeof LightningPubRPC\nexport const ClientAuth = 22242\nexport type ClientAuth = typeof ClientAuth\nexport const NWCWalletRequest = 23194\nexport type NWCWalletRequest = typeof NWCWalletRequest\nexport const NWCWalletResponse = 23195\nexport type NWCWalletResponse = typeof NWCWalletResponse\nexport const NostrConnect = 24133\nexport type NostrConnect = typeof NostrConnect\nexport const HTTPAuth = 27235\nexport type HTTPAuth = typeof HTTPAuth\nexport const Followsets = 30000\nexport type Followsets = typeof Followsets\nexport const Genericlists = 30001\nexport type Genericlists = typeof Genericlists\nexport const Relaysets = 30002\nexport type Relaysets = typeof Relaysets\nexport const Bookmarksets = 30003\nexport type Bookmarksets = typeof Bookmarksets\nexport const Curationsets = 30004\nexport type Curationsets = typeof Curationsets\nexport const ProfileBadges = 30008\nexport type ProfileBadges = typeof ProfileBadges\nexport const BadgeDefinition = 30009\nexport type BadgeDefinition = typeof BadgeDefinition\nexport const Interestsets = 30015\nexport type Interestsets = typeof Interestsets\nexport const CreateOrUpdateStall = 30017\nexport type CreateOrUpdateStall = typeof CreateOrUpdateStall\nexport const CreateOrUpdateProduct = 30018\nexport type CreateOrUpdateProduct = typeof CreateOrUpdateProduct\nexport const LongFormArticle = 30023\nexport type LongFormArticle = typeof LongFormArticle\nexport const DraftLong = 30024\nexport type DraftLong = typeof DraftLong\nexport const Emojisets = 30030\nexport type Emojisets = typeof Emojisets\nexport const Application = 30078\nexport type Application = typeof Application\nexport const LiveEvent = 30311\nexport type LiveEvent = typeof LiveEvent\nexport const UserStatuses = 30315\nexport type UserStatuses = typeof UserStatuses\nexport const ClassifiedListing = 30402\nexport type ClassifiedListing = typeof ClassifiedListing\nexport const DraftClassifiedListing = 30403\nexport type DraftClassifiedListing = typeof DraftClassifiedListing\nexport const Date = 31922\nexport type Date = typeof Date\nexport const Time = 31923\nexport type Time = typeof Time\nexport const Calendar = 31924\nexport type Calendar = typeof Calendar\nexport const CalendarEventRSVP = 31925\nexport type CalendarEventRSVP = typeof CalendarEventRSVP\nexport const Handlerrecommendation = 31989\nexport type Handlerrecommendation = typeof Handlerrecommendation\nexport const Handlerinformation = 31990\nexport type Handlerinformation = typeof Handlerinformation\nexport const CommunityDefinition = 34550\nexport type CommunityDefinition = typeof CommunityDefinition\n"],
  "mappings": "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",
  "names": []
}
